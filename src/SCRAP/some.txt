You need to enhance a React-based character chat application to support dynamic social media sharing with SEO-friendly URLs and character-specific meta tags. The backend provides rich character data, but the frontend needs to transform URLs and generate dynamic meta tags for social platforms.

Current Problem Analysis
Backend Response Structure:

json
{
  "name": "Martin Luther King Jr.",
  "description": "Iconic civil rights leader and Baptist minister who led the movement for racial equality through nonviolent protest. Known for his \"I Have a Dream\" speech and unwavering commitment to justice.",
  "img": "https://upload.wikimedia.org/wikipedia/commons/0/05/Martin_Luther_King%2C_Jr..jpg",
  "native_language": "english",
  "is_multilingual": true,
  "category": "leaders_historical",
  "tags": "Chat with Martin Luther King Jr., civil rights leader and visionary. On Gigaspace history dialogues, explore his dream of equality, timeless speeches, and global influence on justice movements.",
  "id": 50,
  "created_at": "2025-07-07T05:23:15"
}
Current Issues:

Backend URLs: https://space.gigaspace.org/getcharacter/50

Generic social previews with default title/description

Need SEO-friendly URLs: https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr

Need dynamic character-specific meta tags

Required Implementation
1. URL Transformation Service
File: src/services/urlTransformService.js

Create a service that:

Transforms backend character URLs to frontend-friendly URLs

Extracts character IDs from backend URLs

Generates SEO-friendly slugs from character names

Validates character slugs against actual character data

Parses friendly URLs back to component parameters

Key Methods:

transformCharacterUrl(backendUrl, character, section) - Main transformation

generateCharacterUrl(character, section) - Direct URL generation

extractCharacterIdFromUrl(url) - Parse character ID from backend URL

slugify(text) - Convert names to URL-friendly slugs

parseCharacterUrl(url) - Parse friendly URLs

validateCharacterSlug(character, slug) - Validation

2. Enhanced Meta Tag Service
File: src/services/metaTagService.js (enhance existing)

Add new method generateDynamicMetaTags(character, section) that:

Fetches character data if needed (accepts ID or object)

Generates frontend-friendly URLs using URL transformation service

Creates character-specific descriptions using priority fields: bio → description → summary → category-based fallback

Handles character images with priority: image_url → avatar_url → profile_image → fallback

Generates comprehensive meta tags including Open Graph and Twitter Cards

Updates document meta tags immediately for sharing

Priority Description Logic:

Use character.bio if length > 10 chars (truncate at 150)

Use character.description if length > 10 chars

Use category-based description

Use generic fallback

Priority Image Logic:

Check multiple image fields in order

Ensure absolute URLs (add origin if relative)

Fallback to default app icon

3. Enhanced ShareButton Component
File: src/components/common/ShareButton.jsx (update existing)

Enhance the existing component to:

Import and use the URL transformation service

Generate character-specific meta tags before sharing

Update browser meta tags for immediate sharing

Use transformed URLs for all sharing platforms

Handle loading states during meta tag generation

Provide fallback to current URL if transformation fails

Key Changes:

Replace generateShareUrl() method with async version

Add meta tag generation and document updates

Use urlTransformService for URL generation

Enhanced error handling with fallbacks

4. Route Handler Component
File: src/components/CharacterChatHandler.jsx (new)

Create component that:

Handles shared URLs like /dashboard/discover/chat/50/martin-luther-king-jr

Extracts parameters: characterId, section, characterSlug

Loads character data from API

Validates slug matches character name (optional)

Updates meta tags for social crawlers

Redirects to appropriate dashboard section with character loaded

Shows loading/error states appropriately

Passes character data through route state

5. App.js Route Addition
File: src/App.js (update existing)

Add new route BEFORE existing dashboard routes:

javascript
<Route 
  path="/dashboard/:section/chat/:characterId/:characterSlug" 
  element={
    <ProtectedRoute>
      <CharacterChatHandler />
    </ProtectedRoute>
  } 
/>
Technical Requirements
API Integration
Use existing apiService.getCharacterById(characterId) method

Leverage existing caching mechanisms

Handle API errors gracefully with fallbacks

Use existing error handling patterns

URL Structure
Input: https://space.gigaspace.org/getcharacter/50

Output: https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr

Pattern: /dashboard/{section}/chat/{characterId}/{character-slug}

Slug Rules: lowercase, alphanumeric + hyphens, no special chars

Meta Tag Generation
Generate these tags dynamically:

xml
<title>Chat with Martin Luther King Jr | GigaSpace</title>
<meta name="description" content="Chat with Martin Luther King Jr. Iconic civil rights leader...">
<meta property="og:title" content="Chat with Martin Luther King Jr">
<meta property="og:description" content="Chat with Martin Luther King Jr...">
<meta property="og:image" content="https://upload.wikimedia.org/...">
<meta property="og:url" content="https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr">
<meta name="twitter:card" content="summary_large_image">
<!-- Additional Open Graph and Twitter Card tags -->
Error Handling
Invalid character IDs → show error, don't break

Missing character data → use fallback meta tags

API failures → graceful degradation

Malformed URLs → redirect to appropriate section

Network issues → show loading states

Performance Considerations
Cache character data and meta tags

Use existing API service caching

Minimize API calls through smart caching

Reuse existing singleton pattern for services

Avoid blocking UI during meta tag updates

Browser Compatibility
Modern browsers (Chrome, Firefox, Safari, Edge)

Fallback for older browsers where possible

Progressive enhancement approach

Mobile-responsive design maintained

Implementation Steps
Step 1: Core Services (1-2 hours)
Create urlTransformService.js with all transformation methods

Add generateDynamicMetaTags() method to existing metaTagService.js

Test URL transformation in browser console

Step 2: Component Updates (1 hour)
Update ShareButton.jsx to use new services

Test share URL generation

Verify meta tag updates in DevTools

Step 3: Route Handling (1 hour)
Create CharacterChatHandler.jsx component

Add route to App.js

Test shared URL redirection

Step 4: Testing & Validation (30 minutes)
Test with Facebook Debugger: https://developers.facebook.com/tools/debug/

Test with Twitter Card Validator: https://cards-dev.twitter.com/validator

Verify all social platforms show dynamic content

Expected Results
Before Implementation:
URL: https://space.gigaspace.org/getcharacter/50

Title: "GigaSpace - Chat with Historical Characters"

Description: Generic site description

Image: Default app logo

After Implementation:
URL: https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr

Title: "Chat with Martin Luther King Jr | GigaSpace"

Description: "Chat with Martin Luther King Jr. Iconic civil rights leader and Baptist minister who led the movement for racial equality through nonviolent protest. Known for his 'I Have a Dream' speech..."

Image: Character's Wikipedia image

Code Quality Requirements
Follow existing code patterns and conventions

Use TypeScript-style JSDoc comments

Implement proper error boundaries

Follow React best practices

Maintain existing performance characteristics

Use existing Material-UI components and styling

Preserve mobile responsiveness

Follow existing import/export patterns

Testing Checklist
 URL transformation works correctly

 Meta tags update dynamically

 Social media previews display properly

 Shared URLs redirect correctly

 Error handling for missing/invalid data

 Loading states work properly

 Mobile compatibility maintained

 No breaking changes to existing functionality

