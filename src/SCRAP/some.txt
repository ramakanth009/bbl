Complete Implementation Prompt: Dynamic Multi-Character Social Media Sharing System
Project Context
You are building an enhanced social media sharing system for a React-based character chat application called "GigaSpace". The app has multiple characters (historical figures, fictional characters) that users can chat with. Currently, all shared links show generic meta tags, but we need dynamic, character-specific sharing with SEO-friendly URLs and rich social media previews.

Current Architecture
Frontend: React + Material-UI + React Router

Backend: FastAPI providing character data via REST API

Base URL: https://space.gigaspace.org

Current sharing: Generic links with default meta tags

Target: Dynamic character-specific links with rich previews

Backend API Data Structure
Characters are provided with this data structure:

json
{
  "name": "Martin Luther King Jr.",
  "description": "Iconic civil rights leader and Baptist minister who led the movement for racial equality through nonviolent protest. Known for his \"I Have a Dream\" speech and unwavering commitment to justice, love, and human dignity.",
  "img": "https://upload.wikimedia.org/wikipedia/commons/0/05/Martin_Luther_King%2C_Jr..jpg",
  "native_language": "english",
  "is_multilingual": true,
  "category": "leaders_historical",
  "tags": "Chat with Martin Luther King Jr., civil rights leader and visionary. On Gigaspace history dialogues, explore his dream of equality, timeless speeches, and global influence on justice movements.",
  "id": 50,
  "created_at": "2025-07-07T05:23:15"
}
Requirements
URL Transformation
FROM: https://space.gigaspace.org/getcharacter/50

TO: https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr

Dynamic Meta Tags
Title: Chat with [Character Name] | GigaSpace

Description: Use character's description field (truncate at 150 chars) + "Start chatting now on GigaSpace"

Image: Use character's img field with absolute URL validation

URL: SEO-friendly format with character ID and name slug

Social Platform Support
Facebook, Twitter, LinkedIn, WhatsApp, Telegram, Reddit, Email

Copy to clipboard functionality

Proper URL encoding and meta tag formatting

Implementation Requirements
1. URL Transformation Service
Create src/services/urlTransformService.js:

Key Features:

Generate share URLs for any character object or character ID

Handle both sync (object) and async (ID) character data

URL-friendly slug generation from character names

Caching system for performance

Validation of character data

Batch processing for multiple characters

Parse backend URLs to extract character IDs

Methods Required:

generateShareableUrl(characterOrId, section = 'discover') - Main method

generateMultipleShareUrls(characters, section) - Batch processing

parseBackendUrl(backendUrl) - Extract character ID from backend URLs

slugify(text) - Convert names to URL slugs

isValidCharacter(character) - Validation

clearCache() - Cache management

2. Enhanced Meta Tag Service
Enhance existing src/services/metaTagService.js:

New Methods Required:

generateDynamicMetaTags(characterOrId, section) - Main dynamic method

generateBatchMetaTags(characters, section) - Batch processing

Enhanced generateCharacterDescription() - Use character.description field

Enhanced getCharacterImage() - Handle character.img field

Integration with URL transformation service

Meta Tag Structure:

javascript
{
  // Basic meta tags
  title: `Chat with ${characterName} | GigaSpace`,
  description: // Generated from character.description
  url: // SEO-friendly URL
  image: // character.img with absolute URL
  
  // Open Graph tags
  ogTitle, ogDescription, ogImage, ogUrl, ogType, ogSiteName,
  
  // Twitter Card tags  
  twitterCard, twitterTitle, twitterDescription, twitterImage, twitterSite,
  
  // Additional tags
  keywords, author, robots, characterId, characterName, section
}
3. Enhanced ShareButton Component
Replace existing src/components/common/ShareButton.jsx:

Key Features:

Accept character object as prop

Dynamic URL and meta tag generation on sharing

Loading states with CircularProgress

Error handling with specific character context

Validation to prevent invalid character sharing

Success messages with character names

Optional onShare callback for analytics

Support both icon and text variants

Props:

character (required) - Character object

section (optional, default: 'discover') - App section

size (optional, default: 'medium') - Icon size

variant (optional, default: 'icon') - 'icon' or 'text'

onShare (optional) - Callback function

4. Integration with Existing Components
The ShareButton should integrate seamlessly with:

Character grid/list components

Chat panels

Character detail pages

Any component displaying characters

Usage Example:

jsx
<ShareButton 
  character={character}
  section="discover"
  variant="icon"
  onShare={(data) => {
    console.log(`Shared ${data.character.name} on ${data.platform}`);
  }}
/>
Technical Specifications
Error Handling
Graceful fallbacks for invalid characters

Network error handling

API failure fallbacks to current URL

User-friendly error messages

Loading states during async operations

Performance Optimization
URL caching to prevent regeneration

Batch processing for multiple characters

Lazy loading of character data

Debounced API calls

Memory-efficient caching with size limits

Browser Compatibility
Modern clipboard API with fallbacks

Cross-browser meta tag support

Proper URL encoding for all platforms

Social media crawler optimization

Mobile Responsiveness
Touch-friendly interface

Responsive sharing menu

Mobile-optimized URLs

Proper viewport meta tag updates

Expected Results
Before Implementation:
text
URL: https://space.gigaspace.org/getcharacter/50
Title: "GigaSpace - Chat with Historical Characters"
Description: Generic site description
Image: Default app logo
After Implementation:
text
URL: https://gigaspace.org/dashboard/discover/chat/50/martin-luther-king-jr
Title: "Chat with Martin Luther King Jr | GigaSpace"  
Description: "Chat with Martin Luther King Jr. Iconic civil rights leader and Baptist minister who led the movement for racial equality through nonviolent protest. Known for his \"I Have a Dream\" speech... Start chatting now on GigaSpace."
Image: https://upload.wikimedia.org/wikipedia/commons/0/05/Martin_Luther_King%2C_Jr..jpg
Code Quality Requirements
TypeScript-like JSDoc comments for all methods

Error boundaries and try-catch blocks

Console logging for debugging (removable in production)

Modular design with clear separation of concerns

ES6+ syntax with modern JavaScript features

React hooks and functional component patterns

Material-UI best practices for consistent styling

Testing Considerations
Validate URL generation with various character names

Test special character handling in slugs

Verify social platform URL formats

Test caching behavior and cache invalidation

Mobile device testing for sharing functionality

Social media crawler testing (Facebook Debugger, Twitter Card Validator)

File Structure Output Required
text
src/
├── services/
│   ├── urlTransformService.js (NEW)
│   ├── metaTagService.js (ENHANCED)
│   └── api.js (existing - no changes)
├── components/
│   └── common/
│       └── ShareButton.jsx (REPLACED)
└── [other existing files unchanged]
Success Criteria
Dynamic URLs: Every character generates unique, SEO-friendly share URLs

Rich Previews: All social platforms show character-specific title, description, and image

Performance: Fast sharing with proper caching and error handling

Scalability: Works with unlimited number of characters automatically

User Experience: Intuitive sharing with clear feedback and loading states

Cross-Platform: Perfect sharing across Facebook, Twitter, LinkedIn, WhatsApp, Telegram, Reddit, Email

Implementation Priority
Create urlTransformService.js with complete functionality

Enhance metaTagService.js with dynamic methods

Replace ShareButton.jsx with enhanced version

Test integration with existing character components

Validate social media preview generation